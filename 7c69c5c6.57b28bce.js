(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{117:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(r),m=n,f=b["".concat(i,".").concat(m)]||b[m]||u[m]||o;return r?a.a.createElement(f,c(c({ref:t},s),{},{components:r})):a.a.createElement(f,c({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},88:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),o=(r(0),r(117)),i={id:"intro",title:"Intro",sidebar_label:"Intro",slug:"/users"},c={unversionedId:"users/intro",id:"users/intro",isDocsHomePage:!1,title:"Intro",description:"FlowTorch is a PyTorch library for representation normalizing flows.",source:"@site/docs/users/intro.md",slug:"/users",permalink:"/users",editUrl:"https://github.com/facebookincubator/flowtorch/edit/master/website/docs/users/intro.md",version:"current",sidebar_label:"Intro",sidebar:"usersSidebar",next:{title:"Installation",permalink:"/users/installation"}},l=[],s={toc:l};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://flowtorch.ai"}),"FlowTorch")," is a PyTorch library for representation normalizing flows."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Simply put, a normalizing flow is a learnable function that inputs samples from a simple random distribution, typically Gaussian noise, and outputs samples from a more complex target distribution.")),Object(o.b)("p",null,"For instance, ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://arxiv.org/abs/1906.04032"}),"a normalizing flow can be trained")," to transform high-dimensional standard Gaussian noise (illustrated conceptually in two dimensions in the table) into samples of a distribution based on a picture of Claude Shannon:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Input Samples"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Output Samples"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Training Data"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(o.b)("img",{src:"/img/standard_normal_samples.png",alt:"Sample from Bivariate Standard Normal",width:"200rem"})),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(o.b)("img",{src:"/img/claude_shannon.png",alt:"Sample from Neural Spline Flow",width:"200rem"})),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(o.b)("img",{src:"/img/claude_shannon.png",alt:"Sample from Neural Spline Flow",width:"200rem"}))))),Object(o.b)("p",null,"We believe, although still a nascent field, that normalizing flows are a fundamental component of the modern statistics and probabilistic computing toolkit, and they have already found state-of-the-art applications in Bayesian inference, speech synthesis, and ???, to name a few. ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://flowtorch.ai"}),"FlowTorch")," is a library that provides PyTorch components for constructing such flows using the latest research in the field."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Moreover, it defines a well-designed interface so that researchers can easily contribute their implementations.")),Object(o.b)("p",null,"For more theoretical background on normalizing flows and information about their applications, see the primer ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"users/univariate"}),"here"),", which also links to recent survey papers."))}p.isMDXComponent=!0}}]);