"use strict";(self.webpackChunkflowtorch=self.webpackChunkflowtorch||[]).push([[7138],{2662:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>m,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(7462),o=(a(7294),a(3905)),i=a(2814),r=a(1436),c=(a(1032),a(8666)),s=(a(2520),a(84),a(7868));const l={id:"flowtorch.nn.create_mask",sidebar_label:"create_mask"},m=void 0,p={unversionedId:"api/flowtorch.nn.create_mask",id:"api/flowtorch.nn.create_mask",isDocsHomePage:!1,title:"flowtorch.nn.create_mask",description:"flowtorch  nn  create_mask",source:"@site/docs/api/flowtorch.nn.create_mask.mdx",sourceDirName:"api",slug:"/api/flowtorch.nn.create_mask",permalink:"/api/flowtorch.nn.create_mask",editUrl:"https://github.com/facebookincubator/flowtorch/edit/main/website/docs/api/flowtorch.nn.create_mask.mdx",tags:[],version:"current",frontMatter:{id:"flowtorch.nn.create_mask",sidebar_label:"create_mask"},sidebar:"apiSidebar",previous:{title:"MaskedLinear",permalink:"/api/flowtorch.nn.maskedlinear"},next:{title:"Overview",permalink:"/api/flowtorch.ops"}},d=[{value:'<span className="doc-symbol-name">flowtorch.nn.create_mask</span>',id:"function",children:[],level:2}],h={toc:d};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(s.Z,{url:"https://github.com/facebookincubator/flowtorch/blob/main/flowtorch/nn/made.py",mdxType:"PythonNavbar"},(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/api/flowtorch"},"flowtorch")," ",(0,o.kt)(i.G,{icon:r.cLY,size:"sm",mdxType:"FontAwesomeIcon"})," ",(0,o.kt)("a",{parentName:"p",href:"/api/flowtorch.nn"},"nn")," ",(0,o.kt)(i.G,{icon:r.cLY,size:"sm",mdxType:"FontAwesomeIcon"})," ",(0,o.kt)("em",{parentName:"p"},"create_mask"))),(0,o.kt)(c.Z,{mdxType:"PythonFunction"},(0,o.kt)("div",{className:"doc-function-row"},(0,o.kt)("div",{className:"doc-function-label"},(0,o.kt)("span",{className:"doc-symbol-label"},"function")),(0,o.kt)("div",{className:"doc-function-signature"},(0,o.kt)("h2",{id:"function"},(0,o.kt)("span",{className:"doc-symbol-name"},"flowtorch.nn.create","_","mask")),(0,o.kt)("span",{className:"doc-symbol-signature"},"(input_dim: int, context_dim: int, hidden_dims: Sequence[int], permutation: torch.LongTensor, output_multiplier: int) -> Tuple[Sequence[torch.Tensor], torch.Tensor]")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\nCreates MADE masks for a conditional distribution\n:param input_dim: the dimensionality of the input variable\n:param context_dim: the dimensionality of the variable that is\nconditioned on (for conditional densities)\n:param hidden_dims: the dimensionality of the hidden layers(s)\n:param permutation: the order of the input variables\n:param output_multipliers: tiles the output (e.g. for when a separate\nmean and scale parameter are desired)\n\n")))}u.isMDXComponent=!0}}]);