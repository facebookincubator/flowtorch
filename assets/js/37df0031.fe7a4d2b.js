"use strict";(self.webpackChunkflowtorch=self.webpackChunkflowtorch||[]).push([[7138],{2662:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return h}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=n(2814),c=n(1436),s=(n(1032),n(8666)),m=(n(2520),n(84),n(7868)),l=["components"],p={id:"flowtorch.nn.create_mask",sidebar_label:"create_mask"},d=void 0,u={unversionedId:"api/flowtorch.nn.create_mask",id:"api/flowtorch.nn.create_mask",isDocsHomePage:!1,title:"flowtorch.nn.create_mask",description:"flowtorch  nn  create_mask",source:"@site/docs/api/flowtorch.nn.create_mask.mdx",sourceDirName:"api",slug:"/api/flowtorch.nn.create_mask",permalink:"/api/flowtorch.nn.create_mask",editUrl:"https://github.com/facebookincubator/flowtorch/edit/main/website/docs/api/flowtorch.nn.create_mask.mdx",tags:[],version:"current",frontMatter:{id:"flowtorch.nn.create_mask",sidebar_label:"create_mask"},sidebar:"apiSidebar",previous:{title:"MaskedLinear",permalink:"/api/flowtorch.nn.maskedlinear"},next:{title:"Overview",permalink:"/api/flowtorch.ops"}},h=[{value:'<span className="doc-symbol-name">flowtorch.nn.create_mask</span>',id:"function",children:[],level:2}],f={toc:h};function k(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(m.Z,{url:"https://github.com/facebookincubator/flowtorch/blob/main/flowtorch/nn/made.py",mdxType:"PythonNavbar"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/flowtorch"},"flowtorch")," ",(0,r.kt)(i.G,{icon:c.cLY,size:"sm",mdxType:"FontAwesomeIcon"})," ",(0,r.kt)("a",{parentName:"p",href:"/api/flowtorch.nn"},"nn")," ",(0,r.kt)(i.G,{icon:c.cLY,size:"sm",mdxType:"FontAwesomeIcon"})," ",(0,r.kt)("em",{parentName:"p"},"create_mask"))),(0,r.kt)(s.Z,{mdxType:"PythonFunction"},(0,r.kt)("div",{className:"doc-function-row"},(0,r.kt)("div",{className:"doc-function-label"},(0,r.kt)("span",{className:"doc-symbol-label"},"function")),(0,r.kt)("div",{className:"doc-function-signature"},(0,r.kt)("h2",{id:"function"},(0,r.kt)("span",{className:"doc-symbol-name"},"flowtorch.nn.create","_","mask")),(0,r.kt)("span",{className:"doc-symbol-signature"},"(input_dim: int, context_dim: int, hidden_dims: Sequence[int], permutation: torch.LongTensor, output_multiplier: int) -> Tuple[Sequence[torch.Tensor], torch.Tensor]")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\nCreates MADE masks for a conditional distribution\n:param input_dim: the dimensionality of the input variable\n:param context_dim: the dimensionality of the variable that is\nconditioned on (for conditional densities)\n:param hidden_dims: the dimensionality of the hidden layers(s)\n:param permutation: the order of the input variables\n:param output_multipliers: tiles the output (e.g. for when a separate\nmean and scale parameter are desired)\n\n")))}k.isMDXComponent=!0}}]);