"use strict";(self.webpackChunkflowtorch=self.webpackChunkflowtorch||[]).push([[4461],{7272:function(e,o,a){a.r(o),a.d(o,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return u},toc:function(){return k},default:function(){return w}});var t=a(7462),c=a(3366),n=(a(7294),a(3905)),s=a(2814),l=a(1436),r=(a(1032),a(8666)),i=(a(2520),a(84),a(7868)),p=["components"],d={id:"flowtorch.docs.walk_packages",sidebar_label:"walk_packages"},m=void 0,u={unversionedId:"api/flowtorch.docs.walk_packages",id:"api/flowtorch.docs.walk_packages",isDocsHomePage:!1,title:"flowtorch.docs.walk_packages",description:"flowtorch  docs  walk_packages",source:"@site/docs/api/flowtorch.docs.walk_packages.mdx",sourceDirName:"api",slug:"/api/flowtorch.docs.walk_packages",permalink:"/api/flowtorch.docs.walk_packages",editUrl:"https://github.com/facebookincubator/flowtorch/edit/main/website/docs/api/flowtorch.docs.walk_packages.mdx",tags:[],version:"current",frontMatter:{id:"flowtorch.docs.walk_packages",sidebar_label:"walk_packages"},sidebar:"apiSidebar",previous:{title:"sparse_module_hierarchy",permalink:"/api/flowtorch.docs.sparse_module_hierarchy"},next:{title:"Overview",permalink:"/api/flowtorch.lazy1"}},k=[{value:'<span className="doc-symbol-name">flowtorch.docs.walk_packages</span>',id:"function",children:[],level:2}],f={toc:k};function w(e){var o=e.components,a=(0,c.Z)(e,p);return(0,n.kt)("wrapper",(0,t.Z)({},f,a,{components:o,mdxType:"MDXLayout"}),(0,n.kt)(i.Z,{url:"https://github.com/facebookincubator/flowtorch/blob/main/flowtorch/docs.py",mdxType:"PythonNavbar"},(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/api/flowtorch"},"flowtorch")," ",(0,n.kt)(s.G,{icon:l.cLY,size:"sm",mdxType:"FontAwesomeIcon"})," ",(0,n.kt)("a",{parentName:"p",href:"/api/flowtorch.docs"},"docs")," ",(0,n.kt)(s.G,{icon:l.cLY,size:"sm",mdxType:"FontAwesomeIcon"})," ",(0,n.kt)("em",{parentName:"p"},"walk_packages"))),(0,n.kt)(r.Z,{mdxType:"PythonFunction"},(0,n.kt)("div",{className:"doc-function-row"},(0,n.kt)("div",{className:"doc-function-label"},(0,n.kt)("span",{className:"doc-symbol-label"},"function")),(0,n.kt)("div",{className:"doc-function-signature"},(0,n.kt)("h2",{id:"function"},(0,n.kt)("span",{className:"doc-symbol-name"},"flowtorch.docs.walk","_","packages")),(0,n.kt)("span",{className:"doc-symbol-signature"},"(modname: str, filter: Union[Callable[[Any], bool], NoneType] = None) -> Mapping[str, Tuple[module, Sequence[Tuple[str, Any]]]]")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\nGiven a base module name, return a mapping from the name of all modules\naccessible under the base to a tuple of module and symbol objects.\n\nA symbol is represented by a tuple of the object name and value, and is\neither a function or a class accessible when the module is imported.\n\n\n")))}w.isMDXComponent=!0}}]);