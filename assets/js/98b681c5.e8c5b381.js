"use strict";(self.webpackChunkflowtorch=self.webpackChunkflowtorch||[]).push([[8428],{2882:(e,t,o)=>{o.r(t),o.d(t,{contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=o(7462),n=(o(7294),o(3905));const s={id:"ops",title:"Continuous Integration",sidebar_label:"Continuous Integration"},r=void 0,i={unversionedId:"dev/ops",id:"dev/ops",isDocsHomePage:!1,title:"Continuous Integration",description:"Please do not feel intimidated by the thought of having to make your code pass the CI tests! The core developer team is happy to work closely with contributors to integrate their code and merge PRs.",source:"@site/docs/dev/ops.md",sourceDirName:"dev",slug:"/dev/ops",permalink:"/dev/ops",editUrl:"https://github.com/facebookincubator/flowtorch/edit/main/website/docs/dev/ops.md",tags:[],version:"current",frontMatter:{id:"ops",title:"Continuous Integration",sidebar_label:"Continuous Integration"},sidebar:"devsSidebar",previous:{title:"Overview",permalink:"/dev/overview"},next:{title:"Docs",permalink:"/dev/docs"}},l=[{value:"Workflow Steps",id:"workflow-steps",children:[],level:2},{value:"Successful Commits",id:"successful-commits",children:[{value:"Run Tests",id:"run-tests",children:[],level:3},{value:"Check Types",id:"check-types",children:[],level:3},{value:"Formatting and Linting",id:"formatting-and-linting",children:[],level:3}],level:2}],c={toc:l};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"Please do not feel intimidated by the thought of having to make your code pass the CI tests! The core developer team is happy to work closely with contributors to integrate their code and merge PRs."))),(0,n.kt)("p",null,"FlowTorch uses ",(0,n.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions"},"GitHub Actions")," to run code quality tests on pushes or pull requests to the ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," branch, a process known as ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Continuous_integration"},"continuous integration")," (CI). The tests are run for Python versions 3.7, 3.8, and 3.9, and must be successful for a PR to be merged into ",(0,n.kt)("inlineCode",{parentName:"p"},"main"),". All workflow runs can be viewed ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookincubator/flowtorch/actions"},"here"),", or else viewed from the link at the bottom of the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookincubator/flowtorch/pulls"},"PR")," in question."),(0,n.kt)("h2",{id:"workflow-steps"},"Workflow Steps"),(0,n.kt)("p",null,"The definition of the steps performed in the build workflow is found ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/facebookincubator/flowtorch/blob/main/.github/workflows/python-package.yml"},"here")," and is as follows:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The version of Python (3.7, 3.8, or 3.9) is installed along with the developer dependencies of FlowTorch;")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"python -m pip install --upgrade pip\npython -m pip install flake8 black usort pytest mypy\npip install numpy\npip install --pre torch torchvision torchaudio\npip install -e .[dev]\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Each Python source is checked for containing the mandatory copyright header by a ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/flowtorch/blob/main/scripts/copyright_headers.py"},"custom script"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"python scripts/copyright_headers.py --check flowtorch tests scripts examples\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"The formatting of the Python code in the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/flowtorch/tree/main/flowtorch"},"library")," and ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/facebookincubator/flowtorch/tree/main/tests"},"tests")," is checked to ensure it follows a standard using ",(0,n.kt)("a",{parentName:"li",href:"https://black.readthedocs.io/en/stable/"},(0,n.kt)("inlineCode",{parentName:"a"},"black")),";")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"black --check flowtorch tests\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Likewise, the order and formatting of Python ",(0,n.kt)("inlineCode",{parentName:"li"},"import")," statements in the same folders is checked to ensure it follows a standard using ",(0,n.kt)("a",{parentName:"li",href:"https://usort.readthedocs.io/en/stable/"},(0,n.kt)("inlineCode",{parentName:"a"},"usort")),";")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"usort check flowtorch tests\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"A ",(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Static_program_analysis"},"static code analysis"),", or rather, linting, is performed by ",(0,n.kt)("a",{parentName:"li",href:"https://flake8.pycqa.org/en/latest/"},(0,n.kt)("inlineCode",{parentName:"a"},"flake8"))," to find potential bugs;")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"flake8 . tests --count --show-source --statistics\n")),(0,n.kt)("ol",{start:6},(0,n.kt)("li",{parentName:"ol"},"FlowTorch makes use of type hints, which we consider mandatory for all contributed code, and static types are checked with ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/python/mypy"},(0,n.kt)("inlineCode",{parentName:"a"},"mypy")),";")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mypy --disallow-untyped-defs flowtorch\n")),(0,n.kt)("ol",{start:7},(0,n.kt)("li",{parentName:"ol"},"Unit tests:")),(0,n.kt)("p",null,"pytest + XML coverage report"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"pytest --cov=tests --cov-report=xml -W ignore::DeprecationWarning tests/\n")),(0,n.kt)("ol",{start:8},(0,n.kt)("li",{parentName:"ol"},"The coverage report is uploaded to ",(0,n.kt)("a",{parentName:"li",href:"https://about.codecov.io/"},"Codecov")," with a ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/codecov/codecov-action"},"GitHub Action"),". This allows us to analyze the results and produce the percentage of code covered badge.")),(0,n.kt)("p",null,"If any step fails, the workflow fails and you will not be able to merge the PR into ",(0,n.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,n.kt)("h2",{id:"successful-commits"},"Successful Commits"),(0,n.kt)("p",null,"To ensure your PR passes, you should perform these steps ",(0,n.kt)("em",{parentName:"p"},"before pushing your local commits to the remote branch"),"."),(0,n.kt)("h3",{id:"run-tests"},"Run Tests"),(0,n.kt)("p",null,"Run the tests first so that you can do the code formatting just once as the final step:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"pytest tests -W ignore::DeprecationWarning\n")),(0,n.kt)("p",null,"Fix any failing tests until the above command succeeds."),(0,n.kt)("h3",{id:"check-types"},"Check Types"),(0,n.kt)("p",null,"Check that there are no errors with the type hints:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mypy --disallow-untyped-defs flowtorch\n")),(0,n.kt)("p",null,"I find this is one of the most difficult steps to make pass - if you require assistance, comment on your PR, tagging the core developers."),(0,n.kt)("h3",{id:"formatting-and-linting"},"Formatting and Linting"),(0,n.kt)("p",null,"Having ensured the tests and docs are correct, run the following commands to standardize your code's formatting:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"black flowtorch tests\nusort format flowtorch tests\n")),(0,n.kt)("p",null,"Now, run these commands in check mode to ensure there are no errors:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"black --check flowtorch tests\nusort check flowtorch tests\n")),(0,n.kt)("p",null,"It is possible you may need to fix some errors by hand."),(0,n.kt)("p",null,"Finally, run the linter and fix any resulting errors:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"flake8 flowtorch tests\n")),(0,n.kt)("p",null,"At this point, you are ready to commit your changes and push to the remote branch - you're a star! \u2b50 From there, your PR will be reviewed by the core developers and after any modifications are made, merged to the ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," branch."))}p.isMDXComponent=!0}}]);