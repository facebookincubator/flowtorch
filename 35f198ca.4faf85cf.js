(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{116:function(e,s,t){"use strict";t.d(s,"a",(function(){return p})),t.d(s,"b",(function(){return O}));var a=t(0),c=t.n(a);function b(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function l(e,s){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);s&&(a=a.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),t.push.apply(t,a)}return t}function n(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{};s%2?l(Object(t),!0).forEach((function(s){b(e,s,t[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s))}))}return e}function r(e,s){if(null==e)return{};var t,a,c=function(e,s){if(null==e)return{};var t,a,c={},b=Object.keys(e);for(a=0;a<b.length;a++)t=b[a],s.indexOf(t)>=0||(c[t]=e[t]);return c}(e,s);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)t=b[a],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var o=c.a.createContext({}),i=function(e){var s=c.a.useContext(o),t=s;return e&&(t="function"==typeof e?e(s):n(n({},s),e)),t},p=function(e){var s=i(e.components);return c.a.createElement(o.Provider,{value:s},e.children)},j={inlineCode:"code",wrapper:function(e){var s=e.children;return c.a.createElement(c.a.Fragment,{},s)}},d=c.a.forwardRef((function(e,s){var t=e.components,a=e.mdxType,b=e.originalType,l=e.parentName,o=r(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,O=p["".concat(l,".").concat(d)]||p[d]||j[d]||b;return t?c.a.createElement(O,n(n({ref:s},o),{},{components:t})):c.a.createElement(O,n({ref:s},o))}));function O(e,s){var t=arguments,a=s&&s.mdxType;if("string"==typeof e||a){var b=t.length,l=new Array(b);l[0]=d;var n={};for(var r in s)hasOwnProperty.call(s,r)&&(n[r]=s[r]);n.originalType=e,n.mdxType="string"==typeof e?e:a,l[1]=n;for(var o=2;o<b;o++)l[o]=t[o];return c.a.createElement.apply(null,l)}return c.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},78:function(e,s,t){"use strict";t.r(s),t.d(s,"frontMatter",(function(){return n})),t.d(s,"metadata",(function(){return r})),t.d(s,"toc",(function(){return o})),t.d(s,"default",(function(){return p}));var a=t(3),c=t(7),b=(t(0),t(116)),l=["components"],n={id:"flowtorch",title:"flowtorch",sidebar_label:"flowtorch"},r={unversionedId:"api/flowtorch",id:"api/flowtorch",isDocsHomePage:!1,title:"flowtorch",description:"Submodules\xb6",source:"@site/docs/api/flowtorch.md",slug:"/api/flowtorch",permalink:"/api/flowtorch",editUrl:"https://github.com/facebookincubator/flowtorch/edit/master/website/docs/api/flowtorch.md",version:"current",sidebar_label:"flowtorch"},o=[],i={toc:o};function p(e){var s=e.components,t=Object(c.a)(e,l);return Object(b.b)("wrapper",Object(a.a)({},i,t,{components:s,mdxType:"MDXLayout"}),Object(b.b)("div",{class:"section",id:"submodules"},Object(b.b)("h2",null,"Submodules",Object(b.b)("a",{class:"headerlink",href:"#submodules",title:"Permalink to this headline"},"\xb6"))),Object(b.b)("div",{class:"section",id:"module-flowtorch.bijector"},Object(b.b)("span",{id:"flowtorch-bijector-module"}),Object(b.b)("h2",null,"flowtorch.bijector module",Object(b.b)("a",{class:"headerlink",href:"#module-flowtorch.bijector",title:"Permalink to this headline"},"\xb6")),Object(b.b)("dl",{class:"py class"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector"},Object(b.b)("em",{class:"property"},"class "),Object(b.b)("code",{class:"sig-prename descclassname"},"flowtorch.bijector."),Object(b.b)("code",{class:"sig-name descname"},"Bijector"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"param_fn"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},Object(b.b)("a",{class:"reference internal",href:"#flowtorch.param.Params",title:"flowtorch.param.Params"},"flowtorch.param.Params"))),Object(b.b)("span",{class:"sig-paren"},")"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Bases: ",Object(b.b)("code",{class:"xref py py-class docutils literal notranslate"},Object(b.b)("span",{class:"pre"},"object"))),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.autoregressive"},Object(b.b)("code",{class:"sig-name descname"},"autoregressive"),Object(b.b)("em",{class:"property"}," = False"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.autoregressive",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.codomain"},Object(b.b)("code",{class:"sig-name descname"},"codomain"),Object(b.b)("em",{class:"property"},": torch.distributions.constraints.Constraint"),Object(b.b)("em",{class:"property"}," = Real()"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.codomain",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.domain"},Object(b.b)("code",{class:"sig-name descname"},"domain"),Object(b.b)("em",{class:"property"},": torch.distributions.constraints.Constraint"),Object(b.b)("em",{class:"property"}," = Real()"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.domain",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.forward"},Object(b.b)("code",{class:"sig-name descname"},"forward"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"params"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"flowtorch.ParamsModule",Object(b.b)("span",{class:"p"},"]"))),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 torch.Tensor",Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.forward",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.forward_shape"},Object(b.b)("code",{class:"sig-name descname"},"forward_shape"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"event_shape")),Object(b.b)("span",{class:"sig-paren"},")"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.forward_shape",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Infers the shape of the forward computation, given the input shape. Defaults to preserving shape."))),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.inv"},Object(b.b)("code",{class:"sig-name descname"},"inv"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 ",Object(b.b)("a",{class:"reference internal",href:"#flowtorch.bijector.Bijector",title:"flowtorch.bijector.Bijector"},"flowtorch.bijector.Bijector"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.inv",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.inverse"},Object(b.b)("code",{class:"sig-name descname"},"inverse"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"y"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"params"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"flowtorch.ParamsModule",Object(b.b)("span",{class:"p"},"]"))),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 torch.Tensor",Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.inverse",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.inverse_shape"},Object(b.b)("code",{class:"sig-name descname"},"inverse_shape"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"event_shape")),Object(b.b)("span",{class:"sig-paren"},")"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.inverse_shape",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Infers the shapes of the inverse computation, given the output shape. Defaults to preserving shape."))),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.log_abs_det_jacobian"},Object(b.b)("code",{class:"sig-name descname"},"log_abs_det_jacobian"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"y"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"params"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"flowtorch.ParamsModule",Object(b.b)("span",{class:"p"},"]"))),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 torch.Tensor",Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.log_abs_det_jacobian",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Computes the log det jacobian $log |dy/dx|+\\int^x_yx^2$ given input and output. By default, assumes a volume preserving bijection."))),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.near_identity_initialization"},Object(b.b)("code",{class:"sig-name descname"},"near_identity_initialization"),Object(b.b)("em",{class:"property"}," = True"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.near_identity_initialization",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.param_shapes"},Object(b.b)("code",{class:"sig-name descname"},"param_shapes"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"dist"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.distributions.distribution.Distribution")),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 Sequence",Object(b.b)("span",{class:"p"},"["),"torch.Size",Object(b.b)("span",{class:"p"},"]"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.param_shapes",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Given a base distribution, calculate the parameters for the transformation of that distribution under this bijector. By default, no parameters are set."))),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.bijector.Bijector.volume_preserving"},Object(b.b)("code",{class:"sig-name descname"},"volume_preserving"),Object(b.b)("em",{class:"property"}," = True"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.bijector.Bijector.volume_preserving",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null))))),Object(b.b)("div",{class:"section",id:"module-flowtorch.param"},Object(b.b)("span",{id:"flowtorch-param-module"}),Object(b.b)("h2",null,"flowtorch.param module",Object(b.b)("a",{class:"headerlink",href:"#module-flowtorch.param",title:"Permalink to this headline"},"\xb6")),Object(b.b)("dl",{class:"py class"},Object(b.b)("dt",{id:"flowtorch.param.Params"},Object(b.b)("em",{class:"property"},"class "),Object(b.b)("code",{class:"sig-prename descclassname"},"flowtorch.param."),Object(b.b)("code",{class:"sig-name descname"},"Params"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.Params",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Bases: ",Object(b.b)("code",{class:"xref py py-class docutils literal notranslate"},Object(b.b)("span",{class:"pre"},"object"))),Object(b.b)("p",null,"Deferred initialization of parameters."),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.param.Params.build"},Object(b.b)("code",{class:"sig-name descname"},"build"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"input_shape"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Size")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"param_shapes"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Sequence",Object(b.b)("span",{class:"p"},"["),"torch.Size",Object(b.b)("span",{class:"p"},"]"))),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 Tuple",Object(b.b)("span",{class:"p"},"["),"torch.nn.modules.container.ModuleList",Object(b.b)("span",{class:"p"},", "),"Dict",Object(b.b)("span",{class:"p"},"["),"str",Object(b.b)("span",{class:"p"},", "),"torch.Tensor",Object(b.b)("span",{class:"p"},"]"),Object(b.b)("span",{class:"p"},"]"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.Params.build",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.param.Params.forward"},Object(b.b)("code",{class:"sig-name descname"},"forward"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"modules"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"torch.nn.modules.container.ModuleList",Object(b.b)("span",{class:"p"},"]"))," ",Object(b.b)("span",{class:"o"},"=")," ",Object(b.b)("span",{class:"default_value"},"None")),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 Optional",Object(b.b)("span",{class:"p"},"["),"Sequence",Object(b.b)("span",{class:"p"},"["),"torch.Tensor",Object(b.b)("span",{class:"p"},"]"),Object(b.b)("span",{class:"p"},"]"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.Params.forward",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)))),Object(b.b)("dl",{class:"py class"},Object(b.b)("dt",{id:"flowtorch.param.ParamsModule"},Object(b.b)("em",{class:"property"},"class "),Object(b.b)("code",{class:"sig-prename descclassname"},"flowtorch.param."),Object(b.b)("code",{class:"sig-name descname"},"ParamsModule"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"params"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},Object(b.b)("a",{class:"reference internal",href:"#flowtorch.param.Params",title:"flowtorch.param.Params"},"flowtorch.param.Params"))),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"modules"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"torch.nn.modules.container.ModuleList",Object(b.b)("span",{class:"p"},"]"))," ",Object(b.b)("span",{class:"o"},"=")," ",Object(b.b)("span",{class:"default_value"},"None")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"buffers"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"Dict",Object(b.b)("span",{class:"p"},"["),"str",Object(b.b)("span",{class:"p"},", "),"torch.Tensor",Object(b.b)("span",{class:"p"},"]"),Object(b.b)("span",{class:"p"},"]"))," ",Object(b.b)("span",{class:"o"},"=")," ",Object(b.b)("span",{class:"default_value"},"None")),Object(b.b)("span",{class:"sig-paren"},")"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.ParamsModule",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Bases: ",Object(b.b)("code",{class:"xref py py-class docutils literal notranslate"},Object(b.b)("span",{class:"pre"},"torch.nn.modules.module.Module"))),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.param.ParamsModule.forward"},Object(b.b)("code",{class:"sig-name descname"},"forward"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"context"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Optional",Object(b.b)("span",{class:"p"},"["),"torch.Tensor",Object(b.b)("span",{class:"p"},"]"))," ",Object(b.b)("span",{class:"o"},"=")," ",Object(b.b)("span",{class:"default_value"},"None")),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 Optional",Object(b.b)("span",{class:"p"},"["),"Sequence",Object(b.b)("span",{class:"p"},"["),"torch.Tensor",Object(b.b)("span",{class:"p"},"]"),Object(b.b)("span",{class:"p"},"]"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.ParamsModule.forward",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Defines the computation performed at every call."),Object(b.b)("p",null,"Should be overridden by all subclasses."),Object(b.b)("div",{class:"admonition note"},Object(b.b)("p",{class:"admonition-title"},"Note"),Object(b.b)("p",null,"Although the recipe for forward pass needs to be defined within this function, one should call the ",Object(b.b)("code",{class:"xref py py-class docutils literal notranslate"},Object(b.b)("span",{class:"pre"},"Module"))," instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.")))),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.param.ParamsModule.training"},Object(b.b)("code",{class:"sig-name descname"},"training"),Object(b.b)("em",{class:"property"},": bool"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.ParamsModule.training",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)))),Object(b.b)("dl",{class:"py class"},Object(b.b)("dt",{id:"flowtorch.param.ParamsModuleList"},Object(b.b)("em",{class:"property"},"class "),Object(b.b)("code",{class:"sig-prename descclassname"},"flowtorch.param."),Object(b.b)("code",{class:"sig-name descname"},"ParamsModuleList"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"params_modules"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"Sequence",Object(b.b)("span",{class:"p"},"["),Object(b.b)("a",{class:"reference internal",href:"#flowtorch.param.ParamsModule",title:"flowtorch.param.ParamsModule"},"ParamsModule"),Object(b.b)("span",{class:"p"},"]"))),Object(b.b)("span",{class:"sig-paren"},")"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.ParamsModuleList",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Bases: ",Object(b.b)("code",{class:"xref py py-class docutils literal notranslate"},Object(b.b)("span",{class:"pre"},"torch.nn.modules.module.Module"))),Object(b.b)("dl",{class:"py method"},Object(b.b)("dt",{id:"flowtorch.param.ParamsModuleList.forward"},Object(b.b)("code",{class:"sig-name descname"},"forward"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 Sequence",Object(b.b)("span",{class:"p"},"["),"Optional",Object(b.b)("span",{class:"p"},"["),"Sequence",Object(b.b)("span",{class:"p"},"["),"torch.Tensor",Object(b.b)("span",{class:"p"},"]"),Object(b.b)("span",{class:"p"},"]"),Object(b.b)("span",{class:"p"},"]"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.ParamsModuleList.forward",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null,Object(b.b)("p",null,"Defines the computation performed at every call."),Object(b.b)("p",null,"Should be overridden by all subclasses."),Object(b.b)("div",{class:"admonition note"},Object(b.b)("p",{class:"admonition-title"},"Note"),Object(b.b)("p",null,"Although the recipe for forward pass needs to be defined within this function, one should call the ",Object(b.b)("code",{class:"xref py py-class docutils literal notranslate"},Object(b.b)("span",{class:"pre"},"Module"))," instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.")))),Object(b.b)("dl",{class:"py attribute"},Object(b.b)("dt",{id:"flowtorch.param.ParamsModuleList.params_modules"},Object(b.b)("code",{class:"sig-name descname"},"params_modules"),Object(b.b)("em",{class:"property"},": torch.nn.modules.container.ModuleList"),Object(b.b)("a",{class:"headerlink",href:"#flowtorch.param.ParamsModuleList.params_modules",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null))))),Object(b.b)("div",{class:"section",id:"module-flowtorch.utils"},Object(b.b)("span",{id:"flowtorch-utils-module"}),Object(b.b)("h2",null,"flowtorch.utils module",Object(b.b)("a",{class:"headerlink",href:"#module-flowtorch.utils",title:"Permalink to this headline"},"\xb6")),Object(b.b)("dl",{class:"py function"},Object(b.b)("dt",{id:"flowtorch.utils.clamp_preserve_gradients"},Object(b.b)("code",{class:"sig-prename descclassname"},"flowtorch.utils."),Object(b.b)("code",{class:"sig-name descname"},"clamp_preserve_gradients"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"min"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"float")),", ",Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"max"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"float")),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 torch.Tensor",Object(b.b)("a",{class:"headerlink",href:"#flowtorch.utils.clamp_preserve_gradients",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null)),Object(b.b)("dl",{class:"py function"},Object(b.b)("dt",{id:"flowtorch.utils.clipped_sigmoid"},Object(b.b)("code",{class:"sig-prename descclassname"},"flowtorch.utils."),Object(b.b)("code",{class:"sig-name descname"},"clipped_sigmoid"),Object(b.b)("span",{class:"sig-paren"},"("),Object(b.b)("em",{class:"sig-param"},Object(b.b)("span",{class:"n"},"x"),Object(b.b)("span",{class:"p"},":")," ",Object(b.b)("span",{class:"n"},"torch.Tensor")),Object(b.b)("span",{class:"sig-paren"},")")," \u2192 torch.Tensor",Object(b.b)("a",{class:"headerlink",href:"#flowtorch.utils.clipped_sigmoid",title:"Permalink to this definition"},"\xb6")),Object(b.b)("dd",null))),Object(b.b)("div",{class:"section",id:"module-flowtorch"},Object(b.b)("span",{id:"module-contents"}),Object(b.b)("h2",null,"Module contents",Object(b.b)("a",{class:"headerlink",href:"#module-flowtorch",title:"Permalink to this headline"},"\xb6"))))}p.isMDXComponent=!0}}]);