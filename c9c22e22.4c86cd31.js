(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),a=(n(0),n(117)),i={id:"shapes",title:"Shapes",sidebar_label:"Shapes"},s={unversionedId:"users/shapes",id:"users/shapes",isDocsHomePage:!1,title:"Shapes",description:"One of the advantages of using FlowTorch is that we have carefully thought out how shape information is propagated from the base distribution through a sequence of bijective transforms. Before we explain how shapes are handled in FlowTorch, let us revisit the shape conventions shared across PyTorch and TensorFlow.",source:"@site/docs/users/shapes.md",slug:"/users/shapes",permalink:"/users/shapes",editUrl:"https://github.com/facebookincubator/flowtorch/edit/master/website/docs/users/shapes.md",version:"current",sidebar_label:"Shapes",sidebar:"usersSidebar",previous:{title:"Conditional Bijections",permalink:"/users/conditional"},next:{title:"Constraints",permalink:"/users/constraints"}},c=[{value:"Shape Conventions",id:"shape-conventions",children:[]},{value:"Two Principles of FlowTorch Shapes",id:"two-principles-of-flowtorch-shapes",children:[{value:"Unconditional transformed distribution have only a non-trivial event shape",id:"unconditional-transformed-distribution-have-only-a-non-trivial-event-shape",children:[]}]}],l={toc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"One of the advantages of using FlowTorch is that we have carefully thought out how shape information is propagated from the base distribution through a sequence of bijective transforms. Before we explain how shapes are handled in FlowTorch, let us revisit the shape conventions shared across PyTorch and TensorFlow."),Object(a.b)("h2",{id:"shape-conventions"},"Shape Conventions"),Object(a.b)("p",null,"FlowTorch shares the shape conventions of PyTorch's ",Object(a.b)("inlineCode",{parentName:"p"},"torch.distributions.Distribution")," and TensorFlow's ",Object(a.b)("inlineCode",{parentName:"p"},"tfp.distributions.Distribution")," for representing random distributions. In these conventions, the shape of a tensor sampled from a random distribution is divided into three parts: the ",Object(a.b)("em",{parentName:"p"},"sample shape"),", the ",Object(a.b)("em",{parentName:"p"},"batch shape"),", and the ",Object(a.b)("em",{parentName:"p"},"event shape"),"."),Object(a.b)("p",null,"As described in the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.tensorflow.org/probability/examples/Understanding_TensorFlow_Distributions_Shapes#basics"}),"TensorFlow documentation"),","),Object(a.b)("blockquote",null,Object(a.b)("ul",{parentName:"blockquote"},Object(a.b)("li",{parentName:"ul"},"Event shape describes the shape of a single draw from the distribution; it may be dependent across dimensions. For scalar distributions, the event shape is []. For a 5-dimensional MultivariateNormal, the event shape is ","[5]","."),Object(a.b)("li",{parentName:"ul"},'Batch shape describes independent, not identically distributed draws, aka a "batch" of distributions.'),Object(a.b)("li",{parentName:"ul"},"Sample shape describes independent, identically distributed draws of batches from the distribution family."))),Object(a.b)("p",null,"This is best illustrated with some simple examples."),Object(a.b)("h2",{id:"two-principles-of-flowtorch-shapes"},"Two Principles of FlowTorch Shapes"),Object(a.b)("h3",{id:"unconditional-transformed-distribution-have-only-a-non-trivial-event-shape"},"Unconditional transformed distribution have only a non-trivial event shape"))}p.isMDXComponent=!0},117:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,b=u["".concat(i,".").concat(d)]||u[d]||h[d]||a;return n?o.a.createElement(b,s(s({ref:t},l),{},{components:n})):o.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);