# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      has_updated: ${{ steps.version.outputs.has_updated }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8']

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort pytest mypy
        pip install numpy
        pip install --pre torch -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html
        pip install -e .[dev]
    - name: Check formatting with black
      run: |
        black --check flowtorch tests
    - name: Check imports with isort
      run: |
        isort --check flowtorch tests
    - name: Lint with flake8
      run: |
        flake8 flowtorch tests --count --show-source --statistics
    - name: Check types with mypy
      run: |
        mypy flowtorch
    - name: Test with pytest
      run: |
        pytest --cov=tests --cov-report=xml -W ignore::DeprecationWarning tests/
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: 6db8e3c4-f052-4124-abda-13e0f0fe346a
        files: coverage.xml
        directory: ./
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        path_to_write_report: ./codecov_report.txt
        verbose: true
    - name: Sphinx Build
      run: |
        cd docs
        sphinx-apidoc -o source ../flowtorch/
        make html
    - name: See if a tag exists for the current version
      id: version
      run: |
        VERSION_TAG="v$(python setup.py --version)"
        if  [[ $(git ls-remote --tags origin refs/tags/$VERSION_TAG) ]]; then
          # there exists a tag with same name as current version
          echo "::set-output name=has_updated::false"
        else
          echo "::set-output name=has_updated::true"
        fi
        echo "::set-output name=version_tag::$(echo $VERSION_TAG)"
        echo "The current version is $VERSION_TAG"
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build
    # check the current repository so the pypi release workflow won't be run on forks
    if: github.event_name == 'push' && github.repository == 'facebookincubator/flowtorch' && needs.build.outputs.has_updated == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install package dependencies
      run: pip install setuptools wheel

    - name: Build source distribution
      run: python setup.py sdist

    - name: Build Python 3 wheel
      run: python setup.py bdist_wheel

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.PYPI_PASSWORD }}

    - name: Create new release on GitHub
      uses: actions/create-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version_tag }}
        release_name: ${{ needs.build.outputs.version_tag }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
